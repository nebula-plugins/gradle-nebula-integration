<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="17" passed="16" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-07-09T00:15:17Z" name="Command line suite" finished-at="2021-07-09T00:15:17Z" duration-ms="60">
    <groups>
      <group name="included">
        <method signature="NonParallelParameterizationTest.isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" name="isOdd_ShouldReturnTrueForOddNumbers" class="nebula.test.testng.NonParallelParameterizationTest"/>
        <method signature="NonParallelParameterizationTest.isOdd_ShouldReturnTrueForOddNumbersSubset(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" name="isOdd_ShouldReturnTrueForOddNumbersSubset" class="nebula.test.testng.NonParallelParameterizationTest"/>
        <method signature="ParallelParameterizationTest.isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.ParallelParameterizationTest@7bb251bd]" name="isOdd_ShouldReturnTrueForOddNumbers" class="nebula.test.testng.ParallelParameterizationTest"/>
      </group> <!-- included -->
    </groups>
    <test started-at="2021-07-09T00:15:17Z" name="Command line test" finished-at="2021-07-09T00:15:17Z" duration-ms="60">
      <class name="nebula.test.testng.NonParallelParameterizationTest">
        <test-method is-config="true" signature="test()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="test" finished-at="2021-07-09T00:15:17Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method is-config="true" signature="setUpClass()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpClass" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[13]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2147483647]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbersSubset(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbersSubset" description="Test for odd numbers subset" data-provider="numbersSubset" finished-at="2021-07-09T00:15:17Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbersSubset -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbersSubset(java.lang.Integer)[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbersSubset" description="Test for odd numbers subset" data-provider="numbersSubset" finished-at="2021-07-09T00:15:17Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbersSubset -->
        <test-method is-config="true" signature="setUpMethod()[pri:0, instance:nebula.test.testng.NonParallelParameterizationTest@4b20db15]" started-at="2021-07-09T00:15:17Z" name="setUpMethod" finished-at="2021-07-09T00:15:17Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpMethod -->
      </class> <!-- nebula.test.testng.NonParallelParameterizationTest -->
      <class name="nebula.test.testng.ParallelParameterizationTest">
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.ParallelParameterizationTest@7bb251bd]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="14" status="FAIL">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[java.util.concurrent.ExecutionException: java.lang.NullPointerException]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: java.util.concurrent.ExecutionException: java.lang.NullPointerException
at org.testng.internal.PoolService.submitTasksAndWait(PoolService.java:53)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:970)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.junit.support.testng.engine.TestNGTestEngine.configureAndRun(TestNGTestEngine.java:152)
at org.junit.support.testng.engine.TestNGTestEngine.execute(TestNGTestEngine.java:137)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)
at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)
at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)
at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)
at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
at com.sun.proxy.$Proxy2.stop(Unknown Source)
at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:135)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)
at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)
at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:414)
at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)
at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.util.concurrent.ExecutionException: java.lang.NullPointerException
at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)
at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)
at org.testng.internal.PoolService.submitTasksAndWait(PoolService.java:51)
... 53 more
Caused by: java.lang.NullPointerException
at org.junit.platform.launcher.core.ExecutionListenerAdapter.getTestIdentifier(ExecutionListenerAdapter.java:65)
at org.junit.platform.launcher.core.ExecutionListenerAdapter.executionFinished(ExecutionListenerAdapter.java:56)
at org.junit.platform.launcher.core.DelegatingEngineExecutionListener.executionFinished(DelegatingEngineExecutionListener.java:46)
at org.junit.platform.launcher.core.OutcomeDelayingEngineExecutionListener.executionFinished(OutcomeDelayingEngineExecutionListener.java:63)
at org.junit.support.testng.engine.ExecutionListener.reportFinished(ExecutionListener.java:172)
at org.junit.support.testng.engine.ExecutionListener.onTestSuccess(ExecutionListener.java:106)
at org.testng.internal.TestListenerHelper.runTestListeners(TestListenerHelper.java:70)
at org.testng.internal.Invoker.runTestListeners(Invoker.java:1389)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:636)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
... 1 more
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.ParallelParameterizationTest@7bb251bd]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.ParallelParameterizationTest@7bb251bd]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
        <test-method signature="isOdd_ShouldReturnTrueForOddNumbers(java.lang.Integer)[pri:0, instance:nebula.test.testng.ParallelParameterizationTest@7bb251bd]" started-at="2021-07-09T00:15:17Z" name="isOdd_ShouldReturnTrueForOddNumbers" description="Test for odd numbers" data-provider="numbers" finished-at="2021-07-09T00:15:17Z" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isOdd_ShouldReturnTrueForOddNumbers -->
      </class> <!-- nebula.test.testng.ParallelParameterizationTest -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
